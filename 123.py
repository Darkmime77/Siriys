def prim(graph):
    """
    Строит произвольное остовное дерево для заданного графа.

    Args:
    graph: Граф в виде словаря, где ключами являются вершины, а значениями - списки смежных вершин.

    Returns:
    Остовное дерево в виде списка ребер.
    """

    # Инициализируем множество вершин, которые еще не были добавлены в дерево.
    unvisited = set(graph.keys())

    # Инициализируем дерево с одной вершиной.
    tree = [unvisited.pop()]

    # Пока в дереве не будет содержаться все вершины, продолжаем добавлять новые вершины.
    while unvisited:
        # Находим ребро с минимальным весом, которое соединяет вершину в дереве с вершиной, которая еще не добавлена в дерево.
        min_edge = min((tree[-1], v, graph[tree[-1]][v]) for v in unvisited if v not in tree)

        # Добавляем найденное ребро в дерево.
        tree.append(min_edge[1])

        # Удаляем найденную вершину из множества вершин, которые еще не были добавлены в дерево.
        unvisited.remove(min_edge[1])

    return tree


graph = {1: [2, 3],2: [1, 3, 4],3: [1, 2, 4],4: [2, 3, 5],5: [4]}

tree = prim(graph)

print(tree)
